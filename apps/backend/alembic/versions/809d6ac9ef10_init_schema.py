"""init schema

Revision ID: 809d6ac9ef10
Revises: 
Create Date: 2025-08-30 19:55:48.577245

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '809d6ac9ef10'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('groups',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('color_hex', sa.String(), nullable=True),
    sa.Column('parent_group_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['parent_group_id'], ['groups.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('entities',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('contact_email', sa.String(), nullable=True),
    sa.Column('contact_phone', sa.String(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('main_group_id', sa.UUID(), nullable=True),
    sa.Column('is_current_user', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('pos_x', sa.Float(), nullable=True),
    sa.Column('pos_y', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['main_group_id'], ['groups.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('contact_email'),
    sa.UniqueConstraint('contact_phone')
    )
    op.create_table('entity_groups',
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.Column('group_id', sa.UUID(), nullable=False),
    sa.Column('joined_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['entity_id'], ['entities.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('entity_id', 'group_id'),
    sa.UniqueConstraint('entity_id', 'group_id', name='uq_entity_group')
    )
    op.add_column('graph_edges', sa.Column('id', sa.UUID(), nullable=False))
    op.add_column('graph_edges', sa.Column('a_entity_id', sa.UUID(), nullable=False))
    op.add_column('graph_edges', sa.Column('b_entity_id', sa.UUID(), nullable=False))
    op.add_column('graph_edges', sa.Column('label', sa.Text(), nullable=True))
    op.add_column('graph_edges', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.create_unique_constraint('uq_edge_pair', 'graph_edges', ['a_entity_id', 'b_entity_id'])
    op.create_foreign_key(None, 'graph_edges', 'entities', ['b_entity_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'graph_edges', 'entities', ['a_entity_id'], ['id'], ondelete='CASCADE')
    op.drop_column('graph_edges', 'zipr')
    op.drop_column('graph_edges', 'fullname')
    op.drop_column('graph_edges', 'tlid')
    op.drop_column('graph_edges', 'the_geom')
    op.drop_column('graph_edges', 'tnidt')
    op.drop_column('graph_edges', 'roadflg')
    op.drop_column('graph_edges', 'deckedroad')
    op.drop_column('graph_edges', 'countyfp')
    op.drop_column('graph_edges', 'smid')
    op.drop_column('graph_edges', 'tfidr')
    op.drop_column('graph_edges', 'persist')
    op.drop_column('graph_edges', 'tnidf')
    op.drop_column('graph_edges', 'passflg')
    op.drop_column('graph_edges', 'statefp')
    op.drop_column('graph_edges', 'ttyp')
    op.drop_column('graph_edges', 'gid')
    op.drop_column('graph_edges', 'artpath')
    op.drop_column('graph_edges', 'hydroflg')
    op.drop_column('graph_edges', 'gcseflg')
    op.drop_column('graph_edges', 'railflg')
    op.drop_column('graph_edges', 'offsetr')
    op.drop_column('graph_edges', 'lfromadd')
    op.drop_column('graph_edges', 'divroad')
    op.drop_column('graph_edges', 'rtoadd')
    op.drop_column('graph_edges', 'olfflg')
    op.drop_column('graph_edges', 'zipl')
    op.drop_column('graph_edges', 'featcat')
    op.drop_column('graph_edges', 'rfromadd')
    op.drop_column('graph_edges', 'tfidl')
    op.drop_column('graph_edges', 'ltoadd')
    op.drop_column('graph_edges', 'exttyp')
    op.drop_column('graph_edges', 'mtfcc')
    op.drop_column('graph_edges', 'offsetl')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('graph_edges', sa.Column('offsetl', sa.VARCHAR(length=1), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('mtfcc', sa.VARCHAR(length=5), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('exttyp', sa.VARCHAR(length=1), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('ltoadd', sa.VARCHAR(length=12), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('tfidl', sa.NUMERIC(precision=10, scale=0), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('rfromadd', sa.VARCHAR(length=12), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('featcat', sa.VARCHAR(length=1), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('zipl', sa.VARCHAR(length=5), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('olfflg', sa.VARCHAR(length=1), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('rtoadd', sa.VARCHAR(length=12), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('divroad', sa.VARCHAR(length=1), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('lfromadd', sa.VARCHAR(length=12), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('offsetr', sa.VARCHAR(length=1), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('railflg', sa.VARCHAR(length=1), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('gcseflg', sa.VARCHAR(length=1), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('hydroflg', sa.VARCHAR(length=1), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('artpath', sa.VARCHAR(length=1), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('gid', sa.INTEGER(), autoincrement=True, nullable=False))
    op.add_column('graph_edges', sa.Column('ttyp', sa.VARCHAR(length=1), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('statefp', sa.VARCHAR(length=2), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('passflg', sa.VARCHAR(length=1), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('tnidf', sa.NUMERIC(precision=10, scale=0), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('persist', sa.VARCHAR(length=1), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('tfidr', sa.NUMERIC(precision=10, scale=0), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('smid', sa.VARCHAR(length=22), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('countyfp', sa.VARCHAR(length=3), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('deckedroad', sa.VARCHAR(length=1), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('roadflg', sa.VARCHAR(length=1), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('tnidt', sa.NUMERIC(precision=10, scale=0), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('the_geom', sa.NullType(), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('tlid', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('fullname', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('graph_edges', sa.Column('zipr', sa.VARCHAR(length=5), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'graph_edges', type_='foreignkey')
    op.drop_constraint(None, 'graph_edges', type_='foreignkey')
    op.drop_constraint('uq_edge_pair', 'graph_edges', type_='unique')
    op.create_index(op.f('idx_tiger_edges_the_geom_gist'), 'graph_edges', ['the_geom'], unique=False, postgresql_using='gist')
    op.create_index(op.f('idx_tiger_edges_countyfp'), 'graph_edges', ['countyfp'], unique=False)
    op.create_index(op.f('idx_edges_tlid'), 'graph_edges', ['tlid'], unique=False)
    op.drop_column('graph_edges', 'created_at')
    op.drop_column('graph_edges', 'label')
    op.drop_column('graph_edges', 'b_entity_id')
    op.drop_column('graph_edges', 'a_entity_id')
    op.drop_column('graph_edges', 'id')
    op.create_table('street_type_lookup',
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('abbrev', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_hw', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('name', name=op.f('street_type_lookup_pkey'))
    )
    op.create_index(op.f('street_type_lookup_abbrev_idx'), 'street_type_lookup', ['abbrev'], unique=False)
    op.create_table('tract',
    sa.Column('gid', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('statefp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('countyfp', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('tractce', sa.VARCHAR(length=6), autoincrement=False, nullable=True),
    sa.Column('tract_id', sa.VARCHAR(length=11), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('namelsad', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('mtfcc', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('funcstat', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('aland', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('awater', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('intptlat', sa.VARCHAR(length=11), autoincrement=False, nullable=True),
    sa.Column('intptlon', sa.VARCHAR(length=12), autoincrement=False, nullable=True),
    sa.Column('the_geom', sa.NullType(), autoincrement=False, nullable=True),
    sa.CheckConstraint("geometrytype(the_geom) = 'MULTIPOLYGON'::text OR the_geom IS NULL", name=op.f('enforce_geotype_geom')),
    sa.CheckConstraint('st_ndims(the_geom) = 2', name=op.f('enforce_dims_geom')),
    sa.CheckConstraint('st_srid(the_geom) = 4269', name=op.f('enforce_srid_geom')),
    sa.PrimaryKeyConstraint('tract_id', name=op.f('tract_pkey'))
    )
    op.create_table('state',
    sa.Column('gid', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('region', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('division', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('statefp', sa.VARCHAR(length=2), autoincrement=False, nullable=False),
    sa.Column('statens', sa.VARCHAR(length=8), autoincrement=False, nullable=True),
    sa.Column('stusps', sa.VARCHAR(length=2), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('lsad', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('mtfcc', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('funcstat', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('aland', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('awater', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('intptlat', sa.VARCHAR(length=11), autoincrement=False, nullable=True),
    sa.Column('intptlon', sa.VARCHAR(length=12), autoincrement=False, nullable=True),
    sa.Column('the_geom', sa.NullType(), autoincrement=False, nullable=True),
    sa.CheckConstraint("geometrytype(the_geom) = 'MULTIPOLYGON'::text OR the_geom IS NULL", name=op.f('enforce_geotype_the_geom')),
    sa.CheckConstraint('st_ndims(the_geom) = 2', name=op.f('enforce_dims_the_geom')),
    sa.CheckConstraint('st_srid(the_geom) = 4269', name=op.f('enforce_srid_the_geom')),
    sa.PrimaryKeyConstraint('statefp', name=op.f('pk_tiger_state')),
    sa.UniqueConstraint('gid', name=op.f('uidx_tiger_state_gid'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('stusps', name=op.f('uidx_tiger_state_stusps'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_tiger_state_the_geom_gist'), 'state', ['the_geom'], unique=False, postgresql_using='gist')
    op.create_table('geocode_settings',
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('setting', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('unit', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('short_desc', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('name', name=op.f('geocode_settings_pkey'))
    )
    op.create_table('direction_lookup',
    sa.Column('name', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('abbrev', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('name', name=op.f('direction_lookup_pkey'))
    )
    op.create_index(op.f('direction_lookup_abbrev_idx'), 'direction_lookup', ['abbrev'], unique=False)
    op.create_table('tabblock20',
    sa.Column('statefp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('countyfp', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('tractce', sa.VARCHAR(length=6), autoincrement=False, nullable=True),
    sa.Column('blockce', sa.VARCHAR(length=4), autoincrement=False, nullable=True),
    sa.Column('geoid', sa.VARCHAR(length=15), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('mtfcc', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('ur', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('uace', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('uatype', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('funcstat', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('aland', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('awater', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('intptlat', sa.VARCHAR(length=11), autoincrement=False, nullable=True),
    sa.Column('intptlon', sa.VARCHAR(length=12), autoincrement=False, nullable=True),
    sa.Column('the_geom', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('housing', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pop', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('geoid', name=op.f('pk_tabblock20'))
    )
    op.create_table('tabblock',
    sa.Column('gid', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('statefp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('countyfp', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('tractce', sa.VARCHAR(length=6), autoincrement=False, nullable=True),
    sa.Column('blockce', sa.VARCHAR(length=4), autoincrement=False, nullable=True),
    sa.Column('tabblock_id', sa.VARCHAR(length=16), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('mtfcc', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('ur', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('uace', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('funcstat', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('aland', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('awater', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('intptlat', sa.VARCHAR(length=11), autoincrement=False, nullable=True),
    sa.Column('intptlon', sa.VARCHAR(length=12), autoincrement=False, nullable=True),
    sa.Column('the_geom', sa.NullType(), autoincrement=False, nullable=True),
    sa.CheckConstraint("geometrytype(the_geom) = 'MULTIPOLYGON'::text OR the_geom IS NULL", name=op.f('enforce_geotype_geom')),
    sa.CheckConstraint('st_ndims(the_geom) = 2', name=op.f('enforce_dims_geom')),
    sa.CheckConstraint('st_srid(the_geom) = 4269', name=op.f('enforce_srid_geom')),
    sa.PrimaryKeyConstraint('tabblock_id', name=op.f('tabblock_pkey'))
    )
    op.create_table('state_lookup',
    sa.Column('st_code', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('abbrev', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('statefp', sa.CHAR(length=2), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('st_code', name=op.f('state_lookup_pkey')),
    sa.UniqueConstraint('abbrev', name=op.f('state_lookup_abbrev_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('name', name=op.f('state_lookup_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('statefp', name=op.f('state_lookup_statefp_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('bg',
    sa.Column('gid', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('statefp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('countyfp', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('tractce', sa.VARCHAR(length=6), autoincrement=False, nullable=True),
    sa.Column('blkgrpce', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('bg_id', sa.VARCHAR(length=12), autoincrement=False, nullable=False),
    sa.Column('namelsad', sa.VARCHAR(length=13), autoincrement=False, nullable=True),
    sa.Column('mtfcc', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('funcstat', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('aland', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('awater', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('intptlat', sa.VARCHAR(length=11), autoincrement=False, nullable=True),
    sa.Column('intptlon', sa.VARCHAR(length=12), autoincrement=False, nullable=True),
    sa.Column('the_geom', sa.NullType(), autoincrement=False, nullable=True),
    sa.CheckConstraint("geometrytype(the_geom) = 'MULTIPOLYGON'::text OR the_geom IS NULL", name=op.f('enforce_geotype_geom')),
    sa.CheckConstraint('st_ndims(the_geom) = 2', name=op.f('enforce_dims_geom')),
    sa.CheckConstraint('st_srid(the_geom) = 4269', name=op.f('enforce_srid_geom')),
    sa.PrimaryKeyConstraint('bg_id', name=op.f('bg_pkey')),
    comment='block groups'
    )
    op.create_table('zcta5',
    sa.Column('gid', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('statefp', sa.VARCHAR(length=2), autoincrement=False, nullable=False),
    sa.Column('zcta5ce', sa.VARCHAR(length=5), autoincrement=False, nullable=False),
    sa.Column('classfp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('mtfcc', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('funcstat', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('aland', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('awater', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('intptlat', sa.VARCHAR(length=11), autoincrement=False, nullable=True),
    sa.Column('intptlon', sa.VARCHAR(length=12), autoincrement=False, nullable=True),
    sa.Column('partflg', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('the_geom', sa.NullType(), autoincrement=False, nullable=True),
    sa.CheckConstraint("geometrytype(the_geom) = 'MULTIPOLYGON'::text OR the_geom IS NULL", name=op.f('enforce_geotype_the_geom')),
    sa.CheckConstraint('st_ndims(the_geom) = 2', name=op.f('enforce_dims_the_geom')),
    sa.CheckConstraint('st_srid(the_geom) = 4269', name=op.f('enforce_srid_the_geom')),
    sa.PrimaryKeyConstraint('zcta5ce', 'statefp', name=op.f('pk_tiger_zcta5_zcta5ce')),
    sa.UniqueConstraint('gid', name=op.f('uidx_tiger_zcta5_gid'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('layer',
    sa.Column('topology_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('layer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('schema_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('table_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('feature_column', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('feature_type', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('level', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('child_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['topology_id'], ['topology.id'], name=op.f('layer_topology_id_fkey')),
    sa.PrimaryKeyConstraint('topology_id', 'layer_id', name=op.f('layer_pkey')),
    sa.UniqueConstraint('schema_name', 'table_name', 'feature_column', name=op.f('layer_schema_name_table_name_feature_column_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('loader_variables',
    sa.Column('tiger_year', sa.VARCHAR(length=4), autoincrement=False, nullable=False),
    sa.Column('website_root', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('staging_fold', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('data_schema', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('staging_schema', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('tiger_year', name=op.f('loader_variables_pkey'))
    )
    op.create_table('loader_platform',
    sa.Column('os', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('declare_sect', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('pgbin', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('wget', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('unzip_command', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('psql', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('path_sep', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('loader', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('environ_set_command', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('county_process_command', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('os', name=op.f('loader_platform_pkey'))
    )
    op.create_table('loader_lookuptables',
    sa.Column('process_order', sa.INTEGER(), server_default=sa.text('1000'), autoincrement=False, nullable=False),
    sa.Column('lookup_name', sa.TEXT(), autoincrement=False, nullable=False, comment='This is the table name to inherit from and suffix of resulting output table -- how the table will be named --  edges here would mean -- ma_edges , pa_edges etc. except in the case of national tables. national level tables have no prefix'),
    sa.Column('table_name', sa.TEXT(), autoincrement=False, nullable=True, comment='suffix of the tables to load e.g.  edges would load all tables like *edges.dbf(shp)  -- so tl_2010_42129_edges.dbf .  '),
    sa.Column('single_mode', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('load', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False, comment="Whether or not to load the table.  For states and zcta5 (you may just want to download states10, zcta510 nationwide file manually) load your own into a single table that inherits from tiger.states, tiger.zcta5.  You'll get improved performance for some geocoding cases."),
    sa.Column('level_county', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('level_state', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('level_nation', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False, comment='These are tables that contain all data for the whole US so there is just a single file'),
    sa.Column('post_load_process', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('single_geom_mode', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('insert_mode', sa.CHAR(length=1), server_default=sa.text("'c'::bpchar"), autoincrement=False, nullable=False),
    sa.Column('pre_load_process', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('columns_exclude', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True, comment='List of columns to exclude as an array. This is excluded from both input table and output table and rest of columns remaining are assumed to be in same order in both tables. gid, geoid,cpi,suffix1ce are excluded if no columns are specified.'),
    sa.Column('website_root_override', sa.TEXT(), autoincrement=False, nullable=True, comment='Path to use for wget instead of that specified in year table.  Needed currently for zcta where they release that only for 2000 and 2010'),
    sa.PrimaryKeyConstraint('lookup_name', name=op.f('loader_lookuptables_pkey'))
    )
    op.create_table('geocode_settings_default',
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('setting', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('unit', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('short_desc', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('name', name=op.f('geocode_settings_default_pkey'))
    )
    op.create_table('featnames',
    sa.Column('gid', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('tlid', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('fullname', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('predirabrv', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    sa.Column('pretypabrv', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('prequalabr', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    sa.Column('sufdirabrv', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    sa.Column('suftypabrv', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('sufqualabr', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    sa.Column('predir', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('pretyp', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('prequal', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('sufdir', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('suftyp', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('sufqual', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('linearid', sa.VARCHAR(length=22), autoincrement=False, nullable=True),
    sa.Column('mtfcc', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('paflag', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('statefp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('gid', name=op.f('featnames_pkey'))
    )
    op.create_index(op.f('idx_tiger_featnames_tlid_statefp'), 'featnames', ['tlid', 'statefp'], unique=False)
    op.create_index(op.f('idx_tiger_featnames_snd_name'), 'featnames', [sa.literal_column('soundex(name::text)')], unique=False)
    op.create_index(op.f('idx_tiger_featnames_lname'), 'featnames', [sa.literal_column('lower(name::text)')], unique=False)
    op.create_table('secondary_unit_lookup',
    sa.Column('name', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('abbrev', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('name', name=op.f('secondary_unit_lookup_pkey'))
    )
    op.create_index(op.f('secondary_unit_lookup_abbrev_idx'), 'secondary_unit_lookup', ['abbrev'], unique=False)
    op.drop_table('entity_groups')
    op.drop_table('entities')
    op.drop_table('groups')
    # ### end Alembic commands ###
